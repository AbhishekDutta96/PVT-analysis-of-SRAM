// Verilog code of SRAM 

module sram(output [7:0]data_out,input [7:0]data_in,input wr,input rd,input [2:0]addr,input clk,input enable);
reg [7:0] ram [0:7];

integer i;

always @(posedge clk) begin
if(enable) begin
if(wr)
ram[addr]<=data_in;
end
else begin
for(i=0;i<8;i=i+1) 
ram[i]<=8'b0;
end
end
assign data_out= rd? ram[addr]:8'b0;
endmodule

// Testbench code of SRAM

module sramtb();
wire [7:0]data_out;
reg [7:0]data_in;
reg wr,rd;
reg [2:0] addr;
reg clk,enable;
sram dut(data_out,data_in,wr,rd,addr,clk,enable);
initial begin
clk=1'b0;
forever #5 clk=~clk;
end

initial begin
enable=1'b0;
data_in=8'b10101010;
addr=3'b101;
wr=1'b1;
#20 enable=1'b1;rd=1'b1;
#20 enable=1'b0;wr=1'b1;rd=1'b1;
#20 enable=1'b1;wr=1'b0;rd=1'b0;
#100 $finish;

end
endmodule
